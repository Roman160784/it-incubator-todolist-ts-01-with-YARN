{"version":3,"sources":["Button.tsx","Input.tsx","AddIteamForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","Reducers/TaskReducers.ts","Reducers/TodolistReducers.ts","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["Button","React","memo","props","className","class","onClick","title","Input","value","type","onChange","onKeyPress","AddIteamForm","useState","setTitle","error","setError","addTaskHandler","trim","addIteam","e","currentTarget","key","EditableSpan","titleInSpan","setTitleInSpan","editMode","setEditMode","onBlur","onChangeTitle","autoFocus","onDoubleClick","Task","removeTaskHandler","useCallback","id","removeTask","todolistID","onChangeTitleInTask","changeValueInTask","task","isDone","newIsDoneValue","checked","changeStatus","Todolist","tasksForTDList","tasks","filter","t","addTask","changeFilterHandler","changeFilter","onChangeTitleInTL","changeValueInTL","removeTodoListHandler","removeTodoList","map","initialState","App","todolists","useSelector","state","todolist","dispatch","useDispatch","payload","removeTaskAC","addTaskAC","changeFilterAC","Todolistid","changeStatusAC","addTodolist","v1","addTodolistAC","changeValueInTaskAC","changeValueInTLAC","removeTodoListAC","tl","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","copy","console","log","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ec79135d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { isPropertySignature } from 'typescript';\r\n\r\ntype ButtonType = {\r\nclass : string\r\ntitle: string\r\nonClick : () => void\r\n\r\n}\r\n\r\nexport const Button = React.memo( (props: ButtonType) => {\r\n    return(\r\n        <button className={props.class} onClick={props.onClick}>{props.title}</button>\r\n    )\r\n})","import React, { ChangeEvent, KeyboardEvent } from 'react';\r\n\r\ntype InputType = {\r\nvalue: string\r\nonChange: (e: ChangeEvent<HTMLInputElement>) => void\r\nonClick : (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Input = React.memo((props: InputType) => {\r\n    return (\r\n        <input value={props.value} \r\n        type=\"text\" \r\n        onChange={props.onChange} \r\n        onKeyPress={props.onClick}\r\n        />\r\n    )\r\n})","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport { Button } from './Button';\r\nimport { Input } from './Input';\r\n\r\nexport type AddIteamFormType ={\r\n    addIteam : (title: string) => void\r\n}\r\n\r\n\r\nexport const AddIteamForm = React.memo( (props: AddIteamFormType) => {\r\n\r\n    const[title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState <string | null> (null)\r\n\r\n    const addTaskHandler = () => {\r\n        setTitle('')\r\n        if(title.trim() !== \"\"){\r\n        props.addIteam(title)\r\n        }else {\r\n            setError(\"Incorrect Value\")\r\n        }\r\n    }\r\n    \r\n    const onClickInputHandler = (e:KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null)\r\n        }\r\n        if(e.key === \"Enter\"){\r\n            addTaskHandler()\r\n        }\r\n    }\r\nreturn(<div>\r\n               <Input value={title}  onChange={(e) => {setTitle(e.currentTarget.value)}} onClick={onClickInputHandler}/>\r\n                <Button class=\"\" title={'+'} onClick={addTaskHandler}/>\r\n                { error && <div className='error'>{error}</div>}\r\n                </div>\r\n)\r\n})\r\n\r\n\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChangeTitle: (titleInSpan: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n \r\n    const [titleInSpan, setTitleInSpan] = useState(\"\")\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitleInSpan(e.currentTarget.value)\r\n    }\r\n\r\n    const onDoubleClickHandler = () => {\r\n        setTitleInSpan(props.title)\r\n        setEditMode(true)\r\n    }\r\n    const onBlurHandler = () => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(titleInSpan)\r\n    }\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <input type=\"text\" value={titleInSpan} onBlur={onBlurHandler} onChange={onChangeHandler} autoFocus />\r\n            : <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\r\n\r\n    )\r\n})","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Button } from './Button';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { TasksType } from './Reducers/TaskReducers';\r\n\r\nexport type TasksPropsType = {\r\n    task: TasksType\r\n    todolistID: string\r\n    changeValueInTask: (Todolistid: string, id: string, titleInSpan: string) => void\r\n    changeStatus: (Todolistid: string, id: string, isDone: boolean) => void\r\n    removeTask: (todolistID: string, id: string) => void\r\n}\r\n\r\nexport const Task = React.memo( (props: TasksPropsType) => {\r\n\r\n    const removeTaskHandler = useCallback((id: string) => { props.removeTask(props.todolistID, id) }, [props.removeTask, props.todolistID])\r\n    const onChangeTitleInTask = useCallback((titleInSpan: string, id: string,) => \r\n    { props.changeValueInTask(props.todolistID, titleInSpan, id) }, [props.changeValueInTask, props.todolistID,])\r\n\r\n    let changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.todolistID, props.task.id, newIsDoneValue)\r\n    }\r\n    return <li key={props.task.id} className={props.task.isDone ? \"isDoneStatus\" : \"\"}>\r\n        <input type=\"checkbox\" onChange={changeStatusHandler} checked={props.task.isDone} />\r\n        <EditableSpan title={props.task.title} onChangeTitle={(titleInSpan: string) => onChangeTitleInTask(titleInSpan, props.task.id)} />\r\n        <Button class=\"\" title={'Remove Task'} onClick={() => removeTaskHandler(props.task.id)} />\r\n    </li>\r\n})","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { AddIteamForm } from './AddIteamForm';\r\nimport { FilterValueType } from './App';\r\nimport { Button } from './Button';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { TasksType } from './Reducers/TaskReducers';\r\nimport { Task } from './Task';\r\n\r\nexport type TodolistPropsType = {\r\n    title: string\r\n    todolistID: string\r\n    filter: FilterValueType\r\n    tasks: Array<TasksType>\r\n    addTask: (todolistID: string, title: string) => void\r\n    removeTask: (todolistID: string, id: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValueType) => void\r\n    changeStatus: (Todolistid: string, id: string, isDone: boolean) => void\r\n    removeTodoList: (todolistID: string) => void\r\n    changeValueInTL: (Todolistid: string, titleInSpan: string) => void\r\n    changeValueInTask: (Todolistid: string, id: string, titleInSpan : string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    let tasksForTDList = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTDList = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTDList = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    const addTaskHandler = useCallback((title: string) => { props.addTask(props.todolistID, title) }, [props.addTask, props.todolistID]);\r\n    const changeFilterHandler = useCallback((value: FilterValueType) => { props.changeFilter(props.todolistID, value) }, [props.changeFilter, props.todolistID])\r\n    const onChangeTitleInTL = useCallback((titleInSpan: string) => { props.changeValueInTL(props.todolistID, titleInSpan) }, [props.changeValueInTL, props.todolistID])\r\n    const removeTodoListHandler = useCallback(() => { props.removeTodoList(props.todolistID) }, [props.removeTodoList, props.todolistID])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChangeTitle={(titleInSpan: string) => { onChangeTitleInTL(titleInSpan) }} />\r\n                <Button class={''} title={'Remove'} onClick={removeTodoListHandler} />\r\n            </h3>\r\n            <div>\r\n                <AddIteamForm addIteam={addTaskHandler} />\r\n            </div>\r\n            <ul>\r\n                {\r\n                    tasksForTDList.map(t => <Task key={t.id}\r\n                        task={t}\r\n                        todolistID={props.todolistID}\r\n                        changeValueInTask={props.changeValueInTask}\r\n                        changeStatus={props.changeStatus}\r\n                        removeTask={props.removeTask} />)\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button class={props.filter === \"all\" ? 'filterClass' : \"\"}\r\n                    title='All' onClick={() => { changeFilterHandler(\"all\") }} />\r\n                <Button class={props.filter === \"active\" ? 'filterClass' : \"\"}\r\n                    title='Active' onClick={() => { changeFilterHandler(\"active\") }} />\r\n                <Button class={props.filter === \"completed\" ? 'filterClass' : \"\"}\r\n                    title='Completed' onClick={() => { changeFilterHandler(\"completed\") }} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { v1 } from \"uuid\";\r\nimport { addTodolistACType, removeTodoListACType} from \"./TodolistReducers\";\r\n\r\n\r\nexport type TasksMainType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nlet initialState: TasksMainType = {\r\n    // [TodolistID1]:\r\n    //     [{ id: v1(), title: \"React\", isDone: false },\r\n    //     { id: v1(), title: \"Redux\", isDone: false },\r\n    //     { id: v1(), title: \"HTML\", isDone: true },\r\n    //     { id: v1(), title: \"CSS\", isDone: false },],\r\n    // [TodolistID2]:\r\n    //     [{ id: v1(), title: \"Bread\", isDone: false },\r\n    //     { id: v1(), title: \"Sugar\", isDone: false },\r\n    //     { id: v1(), title: \"Milk\", isDone: true },\r\n    //     { id: v1(), title: \"Drink\", isDone: false },],\r\n}\r\n\r\nexport const TaskReducer = (state : TasksMainType = initialState, action : mainActionsType) :TasksMainType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\" : {\r\n            return {...state,[action.payload.todolistID] : state[action.payload.todolistID].filter(t => t.id !== action.payload.id)}\r\n        }\r\n        case \"ADD-TASK\" : {\r\n            return {...state, [action.payload.todolistID] \r\n                : [{id: v1(), title: action.payload.title, isDone: false}, ...state[action.payload.todolistID] ] }\r\n        }\r\n        case \"CHANGE-STATUS\" : {\r\n            return {...state, [action.payload.todolistID] \r\n                : state[action.payload.todolistID].map(t => t.id === action.payload.id \r\n                    ? {...t, isDone: action.payload.isDone} : t)}\r\n        }\r\n        case \"CHANGE-VALUE-IN-TASK-TITLE\" : {\r\n            return {...state, [action.payload.Todolistid] \r\n                : state[action.payload.Todolistid].map(t => t.id === action.payload.id \r\n                    ? {...t, title : action.payload.titleInSpan} : t)}\r\n        }\r\n        case \"REMOVE-TODOLIST\" : {\r\n            let copy = {...state}\r\n            delete copy[action.payload.Todolistid]\r\n            console.log(copy);\r\n            \r\n            return copy\r\n        }\r\n        case \"ADD-TODOLIST\" : {\r\n            return {...state, [action.payload.todolistID] : []}\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type mainActionsType = removeTaskACType | addTaskkACType | changeStatusACType \r\n| changeValueInTaskType | removeTodoListACType | addTodolistACType\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\ntype addTaskkACType = ReturnType<typeof addTaskAC>\r\ntype changeStatusACType = ReturnType<typeof changeStatusAC>\r\ntype changeValueInTaskType = ReturnType<typeof changeValueInTaskAC>\r\n\r\n\r\n\r\nexport const removeTaskAC = (todolistID: string, id: string) => {\r\n    return{\r\n     type : \"REMOVE-TASK\",\r\n     payload: {\r\n        todolistID, id,\r\n     }\r\n    } as const\r\n}\r\n\r\nexport const addTaskAC = (todolistID: string, title: string) => {\r\n    return{\r\n     type : \"ADD-TASK\",\r\n     payload: {\r\n        todolistID, title,\r\n     }\r\n    } as const\r\n}\r\n\r\nexport const changeStatusAC = (todolistID: string, id: string, isDone: boolean ) => {\r\n    return{\r\n     type : \"CHANGE-STATUS\",\r\n     payload: {\r\n        todolistID, id, isDone\r\n     }\r\n    } as const\r\n}\r\n\r\nexport const changeValueInTaskAC = (Todolistid: string, titleInSpan : string, id: string) => {\r\n    return{\r\n     type : \"CHANGE-VALUE-IN-TASK-TITLE\",\r\n     payload: {\r\n        Todolistid, titleInSpan, id, \r\n     }\r\n    } as const\r\n}\r\n\r\n","import { v1 } from \"uuid\"\r\nimport { FilterValueType } from \"../App\"\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\n// export const TodolistID1 = v1()\r\n// export const TodolistID2 = v1()\r\n\r\nlet initialState : Array<TodolistsType> = [\r\n    // { id: TodolistID1, title: \"What to Learn\", filter: \"all\" },\r\n    // { id: TodolistID2, title: \"What to Buy\", filter: \"all\" },\r\n]\r\n\r\nexport const TodolistReducer = (state : Array<TodolistsType> = initialState, action : mainActionsType) :Array<TodolistsType> => {\r\nswitch (action.type) {\r\n    case \"CHANGE-FITER-TL\": {\r\n        return state.map(tl => tl.id === action.payload.todolistID ? {...tl, filter: action.payload.value} : tl)\r\n    }\r\n    case \"CHANGE-VALUE-TL\": {\r\n        return state.map(tl => tl.id === action.payload.Todolistid ? {...tl, title: action.payload.titleInSpan} : tl)\r\n    }\r\n    case \"ADD-TODOLIST\": {\r\n        return [{id: action.payload.todolistID, title: action.payload.title, filter: \"all\"}, ...state]\r\n    }\r\n    case \"REMOVE-TODOLIST\": {\r\n        return state.filter(tl => tl.id !== action.payload.Todolistid)\r\n    }\r\n    default: return state\r\n}\r\n}\r\n\r\n\r\nexport type mainActionsType = changeFilterACType | changeValueInTLACType | addTodolistACType | removeTodoListACType\r\n\r\ntype changeFilterACType = ReturnType<typeof changeFilterAC>\r\ntype changeValueInTLACType = ReturnType<typeof changeValueInTLAC>\r\nexport type addTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\r\n\r\nexport const changeFilterAC = (todolistID: string, value: FilterValueType) => {\r\n    return{\r\n     type : \"CHANGE-FITER-TL\",\r\n     payload: {\r\n        todolistID, value,\r\n     }\r\n    } as const\r\n}\r\n\r\nexport const changeValueInTLAC = (Todolistid: string, titleInSpan : string) => {\r\n    return{\r\n     type : \"CHANGE-VALUE-TL\",\r\n     payload: {\r\n        Todolistid, titleInSpan,\r\n     }\r\n    } as const\r\n}\r\nexport const addTodolistAC = ( title: string) => {\r\n    return{\r\n     type : \"ADD-TODOLIST\",\r\n     payload: {\r\n        todolistID: v1(), title,\r\n     }\r\n    } as const\r\n}\r\nexport const removeTodoListAC = (Todolistid: string) => {\r\n    return{\r\n     type : \"REMOVE-TODOLIST\",\r\n     payload: {\r\n        Todolistid,\r\n     }\r\n    } as const\r\n}","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v1 } from 'uuid';\r\nimport { AddIteamForm } from './AddIteamForm';\r\nimport './App.css';\r\nimport { Todolist, } from './Todolist';\r\nimport {rootReducerType} from './store/store'\r\nimport { addTaskAC, changeStatusAC, changeValueInTaskAC, removeTaskAC, TasksMainType } from './Reducers/TaskReducers';\r\nimport { addTodolistAC, changeFilterAC, changeValueInTLAC, removeTodoListAC, TodolistsType } from './Reducers/TodolistReducers';\r\n\r\n\r\nexport type FilterValueType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector <rootReducerType, Array<TodolistsType>>(state => state.todolist)\r\n    const tasks = useSelector <rootReducerType, TasksMainType> (state => state.tasks)\r\n    let dispatch = useDispatch();\r\n   \r\n    const removeTask = useCallback((todolistID: string, id: string) => {\r\n        dispatch(removeTaskAC(todolistID, id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((todolistID: string, title: string) => {\r\n       dispatch(addTaskAC(todolistID, title))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback( (todolistID: string, value: FilterValueType) => {\r\n        dispatch(changeFilterAC(todolistID, value))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback( (Todolistid: string, id: string, isDone: boolean) => { \r\n        dispatch(changeStatusAC(Todolistid, id, isDone))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback( ( title: string) => {\r\n       dispatch(addTodolistAC(title))\r\n    }, [])\r\n\r\n    const changeValueInTask = useCallback( (Todolistid: string, titleInSpan : string, id: string) => {\r\n        dispatch(changeValueInTaskAC(Todolistid, titleInSpan, id))\r\n    }, [])\r\n\r\n    const changeValueInTL = useCallback( (Todolistid: string, titleInSpan : string) => {\r\n       dispatch(changeValueInTLAC(Todolistid, titleInSpan))\r\n    }, [])\r\n\r\n    const removeTodoList = useCallback( (Todolistid: string) => {\r\n        dispatch(removeTodoListAC(Todolistid))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddIteamForm addIteam={addTodolist}/>\r\n            {\r\n                todolists.map(tl => {\r\n                    return <Todolist\r\n                        key={tl.id}\r\n                        title={tl.title}\r\n                        todolistID={tl.id}\r\n                        tasks={tasks[tl.id]}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeStatus={changeStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeValueInTL={changeValueInTL}\r\n                        changeValueInTask={changeValueInTask}\r\n                    />\r\n                })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\r\nimport { TaskReducer } from \"../Reducers/TaskReducers\";\r\nimport { TodolistReducer } from \"../Reducers/TodolistReducers\";\r\n\r\nlet rootReducer = combineReducers({\r\n   tasks : TaskReducer,\r\n   todolist : TodolistReducer,\r\n})\r\n\r\nexport type rootReducerType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App />, \r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}